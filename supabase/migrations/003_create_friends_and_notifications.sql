-- Migration: Create tables for Friends (amistades) and Notifications
-- This schema supports a request-based friendship system.

-- 1. Create the 'amistades' (Friendships) table
CREATE TABLE IF NOT EXISTS public.amistades (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    
    -- The user who sent the request
    usuario_solicitante_id UUID NOT NULL REFERENCES public.perfiles(id) ON DELETE CASCADE,
    
    -- The user who received the request
    usuario_receptor_id UUID NOT NULL REFERENCES public.perfiles(id) ON DELETE CASCADE,
    
    -- Status of the friendship: 'pendiente', 'aceptada', 'bloqueada'
    estado TEXT NOT NULL DEFAULT 'pendiente',
    
    -- Timestamps
    fecha_solicitud TIMESTAMPTZ NOT NULL DEFAULT timezone('utc', now()),
    fecha_actualizacion TIMESTAMPTZ NOT NULL DEFAULT timezone('utc', now()),
    
    -- Constraints
    CONSTRAINT estado_valido CHECK (estado IN ('pendiente', 'aceptada', 'bloqueada')),
    -- A user cannot send a request to themselves
    CONSTRAINT no_self_friendship CHECK (usuario_solicitante_id <> usuario_receptor_id)
);

-- Index for faster lookups
CREATE INDEX IF NOT EXISTS idx_amistades_usuario_solicitante ON public.amistades(usuario_solicitante_id);
CREATE INDEX IF NOT EXISTS idx_amistades_usuario_receptor ON public.amistades(usuario_receptor_id);

-- Ensure only one relationship record exists between two users, regardless of who is the requester.
-- We use a UNIQUE INDEX on expressions (LEAST/GREATEST) because PostgreSQL doesn't allow functional
-- expressions inside a table-level UNIQUE CONSTRAINT. This enforces an undirected uniqueness between the two UUIDs.
CREATE UNIQUE INDEX IF NOT EXISTS idx_unique_amistades_pair ON public.amistades (
    LEAST(usuario_solicitante_id, usuario_receptor_id),
    GREATEST(usuario_solicitante_id, usuario_receptor_id)
);


-- 2. Create the 'notificaciones' (Notifications) table
CREATE TABLE IF NOT EXISTS public.notificaciones (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    
    -- The user who will receive the notification
    usuario_id UUID NOT NULL REFERENCES public.perfiles(id) ON DELETE CASCADE,
    
    -- Type of notification (e.g., 'solicitud_amistad')
    tipo TEXT NOT NULL,
    
    -- Message content
    mensaje TEXT NOT NULL,
    
    -- Link to the relevant page (e.g., /dashboard/amigos)
    enlace TEXT,
    
    -- Read status
    leida BOOLEAN NOT NULL DEFAULT FALSE,
    
    -- Timestamps
    fecha_creacion TIMESTAMPTZ NOT NULL DEFAULT timezone('utc', now())
);

-- Index for faster lookups of a user's notifications
CREATE INDEX IF NOT EXISTS idx_notificaciones_usuario_id ON public.notificaciones(usuario_id);
